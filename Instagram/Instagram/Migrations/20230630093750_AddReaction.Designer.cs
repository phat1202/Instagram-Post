// <auto-generated />
using System;
using Instagram.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Instagram.Migrations
{
    [DbContext(typeof(InsContext))]
    [Migration("20230630093750_AddReaction")]
    partial class AddReaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Instagram.Models.ImagesPost", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("PostId");

                    b.ToTable("imagesPosts");
                });

            modelBuilder.Entity("Instagram.Models.Imagez", b =>
                {
                    b.Property<int?>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Instagram.Models.Post", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ReId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ReId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Instagram.Models.Reaction", b =>
                {
                    b.Property<int?>("ReId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<bool>("Like")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Instagram.Models.Userz", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Avatar = "https://res.cloudinary.com/dqnsplymn/image/upload/v1687771994/pp_kgahaq.png",
                            ConfirmPassword = "123456",
                            Password = "123456",
                            UserName = "tanphat"
                        },
                        new
                        {
                            UserId = 2,
                            Avatar = "https://res.cloudinary.com/dqnsplymn/image/upload/v1687771724/CM_o4utih.png",
                            ConfirmPassword = "123456",
                            Password = "123456",
                            UserName = "congminh"
                        },
                        new
                        {
                            UserId = 3,
                            Avatar = "https://res.cloudinary.com/dqnsplymn/image/upload/v1687771676/QNAvartatsgd_bjye0p.png",
                            ConfirmPassword = "123456",
                            Password = "123456",
                            UserName = "quocname"
                        });
                });

            modelBuilder.Entity("Instagram.Models.ImagesPost", b =>
                {
                    b.HasOne("Instagram.Models.Imagez", "image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Instagram.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("image");

                    b.Navigation("post");
                });

            modelBuilder.Entity("Instagram.Models.Post", b =>
                {
                    b.HasOne("Instagram.Models.Imagez", "image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Instagram.Models.Reaction", "reaction")
                        .WithOne()
                        .HasForeignKey("Instagram.Models.Post", "ReId");

                    b.HasOne("Instagram.Models.Userz", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("image");

                    b.Navigation("reaction");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Instagram.Models.Reaction", b =>
                {
                    b.HasOne("Instagram.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("Instagram.Models.Userz", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("post");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
